{"ast":null,"code":"import React,{useState,useRef}from\"react\";import axios from\"axios\";import{ClipLoader}from\"react-spinners\";import Select from\"react-select\";import{LANGUAGES,SCALES}from\"../constants\";import\"./audioRecorder.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AudioRecorder=()=>{const[isRecording,setIsRecording]=useState(false);const[isUploading,setIsUploading]=useState(false);const[showLongProcessMessage,setShowLongProcessMessage]=useState(false);const[selectedLanguageCode,setSelectedLanguageCode]=useState(\"\");const[selectedScale,setSelectedScale]=useState(\"\");const[pitches,setPitches]=useState([]);const[uploadedFile,setUploadedFile]=useState(null);const mediaRecorderRef=useRef(null);const audioChunksRef=useRef([]);const scaleOptions=SCALES.map(scale=>({value:scale,label:scale}));const languageOptions=Object.entries(LANGUAGES).map(_ref=>{let[name,code]=_ref;return{value:code,label:name.charAt(0).toUpperCase()+name.slice(1)};});const selectStyle={control:provided=>({...provided,backgroundColor:\"darkgray\",color:\"white\",width:\"30vw\"}),singleValue:provided=>({...provided,color:\"white\"}),option:(provided,state)=>({...provided,backgroundColor:state.isSelected?\"gray\":\"darkgray\",color:\"white\",\":hover\":{backgroundColor:\"gray\"}}),placeholder:provided=>({...provided,color:\"white\"}),input:provided=>({...provided,color:\"white\"})};const handleChangeLanguage=selectedOption=>{setSelectedLanguageCode(selectedOption.value);};const handleChangeScale=selectedOption=>{setSelectedScale(selectedOption.value);};const handleFileUpload=event=>{const file=event.target.files[0];if(file){setUploadedFile(file);setIsRecording(false);uploadAudio(file);}};const uploadAudio=async function(){let audioFile=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;setIsUploading(true);setShowLongProcessMessage(false);const timer=setTimeout(()=>{setShowLongProcessMessage(true);},10000);const formData=new FormData();// Use the provided audioFile if available; otherwise, check for an uploaded file or create one from recorded audio\nif(audioFile){formData.append(\"file\",audioFile);}else if(uploadedFile){formData.append(\"file\",uploadedFile);}else{const audioBlob=new Blob(audioChunksRef.current,{type:\"audio/mp3\"});const generatedAudioFile=new File([audioBlob],\"recording.mp3\",{type:\"audio/mp3\"});formData.append(\"file\",generatedAudioFile);}formData.append(\"language\",selectedLanguageCode);formData.append(\"scale\",selectedScale);try{const response=await axios.post(\"/api/upload\",formData,{headers:{\"Content-Type\":\"multipart/form-data\"}});// Assuming the response includes pitch data or any other relevant information\nsetPitches(response.data.pitches);// Update state with response data\n}catch(error){var _error$response;console.error(\"Error uploading file:\",(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data);}finally{setIsUploading(false);setShowLongProcessMessage(false);clearTimeout(timer);// Reset uploaded file state to allow for new uploads/recordings\nsetUploadedFile(null);}};const startRecording=async()=>{if(uploadedFile)return;// Do not start recording if a file has been uploaded\nsetIsRecording(true);const stream=await navigator.mediaDevices.getUserMedia({audio:true});mediaRecorderRef.current=new MediaRecorder(stream);audioChunksRef.current=[];mediaRecorderRef.current.ondataavailable=event=>{audioChunksRef.current.push(event.data);};mediaRecorderRef.current.onstop=uploadAudio;// Call uploadAudio directly after recording stops\nmediaRecorderRef.current.start();};const handleStopRecording=()=>{setIsRecording(false);mediaRecorderRef.current.stop();};return/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:isUploading?/*#__PURE__*/_jsxs(\"div\",{className:\"spinner-container\",children:[/*#__PURE__*/_jsx(ClipLoader,{color:\"#FFF\",size:50}),showLongProcessMessage&&/*#__PURE__*/_jsx(\"p\",{children:\"This may take a while...\"})]}):/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Pitch It\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Record your audio, specify your language and your targeted key to watch the magic!\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",onChange:handleFileUpload,disabled:isRecording,accept:\"audio/*\"}),/*#__PURE__*/_jsx(\"button\",{onClick:isRecording?handleStopRecording:startRecording,disabled:!!uploadedFile,className:\"record-button \".concat(isRecording?\"recording\":\"\"),children:/*#__PURE__*/_jsx(\"div\",{className:isRecording?'inner-square':'inner-circle'})}),/*#__PURE__*/_jsxs(\"div\",{className:\"selectors\",children:[/*#__PURE__*/_jsx(Select,{options:languageOptions,onChange:handleChangeLanguage,placeholder:\"Language\",styles:selectStyle,isDisabled:isRecording||isUploading}),/*#__PURE__*/_jsx(Select,{options:scaleOptions,onChange:handleChangeScale,placeholder:\"Key\",styles:selectStyle,isDisabled:isRecording||isUploading})]}),pitches&&pitches.map((pitch,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:pitch.note}),/*#__PURE__*/_jsx(\"h1\",{children:pitch.frequency})]},index))]})});};export default AudioRecorder;","map":{"version":3,"names":["React","useState","useRef","axios","ClipLoader","Select","LANGUAGES","SCALES","jsx","_jsx","jsxs","_jsxs","AudioRecorder","isRecording","setIsRecording","isUploading","setIsUploading","showLongProcessMessage","setShowLongProcessMessage","selectedLanguageCode","setSelectedLanguageCode","selectedScale","setSelectedScale","pitches","setPitches","uploadedFile","setUploadedFile","mediaRecorderRef","audioChunksRef","scaleOptions","map","scale","value","label","languageOptions","Object","entries","_ref","name","code","charAt","toUpperCase","slice","selectStyle","control","provided","backgroundColor","color","width","singleValue","option","state","isSelected","placeholder","input","handleChangeLanguage","selectedOption","handleChangeScale","handleFileUpload","event","file","target","files","uploadAudio","audioFile","arguments","length","undefined","timer","setTimeout","formData","FormData","append","audioBlob","Blob","current","type","generatedAudioFile","File","response","post","headers","data","error","_error$response","console","clearTimeout","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","ondataavailable","push","onstop","start","handleStopRecording","stop","className","children","size","onChange","disabled","accept","onClick","concat","options","styles","isDisabled","pitch","index","note","frequency"],"sources":["/var/www/pitch-it/client/src/components/audioRecorder.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport { ClipLoader } from \"react-spinners\";\nimport Select from \"react-select\";\nimport { LANGUAGES, SCALES } from \"../constants\";\nimport \"./audioRecorder.css\";\n\nconst AudioRecorder = () => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const [showLongProcessMessage, setShowLongProcessMessage] = useState(false);\n  const [selectedLanguageCode, setSelectedLanguageCode] = useState(\"\");\n  const [selectedScale, setSelectedScale] = useState(\"\");\n  const [pitches, setPitches] = useState([]);\n  const [uploadedFile, setUploadedFile] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n\n  const scaleOptions = SCALES.map((scale) => ({\n    value: scale,\n    label: scale,\n  }));\n\n  const languageOptions = Object.entries(LANGUAGES).map(([name, code]) => ({\n    value: code,\n    label: name.charAt(0).toUpperCase() + name.slice(1),\n  }));\n\n  const selectStyle = {\n    control: (provided) => ({\n      ...provided,\n      backgroundColor: \"darkgray\",\n      color: \"white\",\n      width: \"30vw\",\n    }),\n    singleValue: (provided) => ({\n      ...provided,\n      color: \"white\",\n    }),\n    option: (provided, state) => ({\n      ...provided,\n      backgroundColor: state.isSelected ? \"gray\" : \"darkgray\",\n      color: \"white\",\n      \":hover\": {\n        backgroundColor: \"gray\",\n      },\n    }),\n    placeholder: (provided) => ({\n      ...provided,\n      color: \"white\",\n    }),\n    input: (provided) => ({\n      ...provided,\n      color: \"white\",\n    }),\n  };\n\n  const handleChangeLanguage = (selectedOption) => {\n    setSelectedLanguageCode(selectedOption.value);\n  };\n\n  const handleChangeScale = (selectedOption) => {\n    setSelectedScale(selectedOption.value);\n  };\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      setUploadedFile(file);\n      setIsRecording(false);\n      uploadAudio(file);\n    }\n  };\n\n  const uploadAudio = async (audioFile = null) => {\n    setIsUploading(true);\n    setShowLongProcessMessage(false);\n  \n    const timer = setTimeout(() => {\n      setShowLongProcessMessage(true);\n    }, 10000);\n  \n    const formData = new FormData();\n    // Use the provided audioFile if available; otherwise, check for an uploaded file or create one from recorded audio\n    if (audioFile) {\n      formData.append(\"file\", audioFile);\n    } else if (uploadedFile) {\n      formData.append(\"file\", uploadedFile);\n    } else {\n      const audioBlob = new Blob(audioChunksRef.current, {\n        type: \"audio/mp3\",\n      });\n      const generatedAudioFile = new File([audioBlob], \"recording.mp3\", {\n        type: \"audio/mp3\",\n      });\n      formData.append(\"file\", generatedAudioFile);\n    }\n    formData.append(\"language\", selectedLanguageCode);\n    formData.append(\"scale\", selectedScale);\n  \n    try {\n      const response = await axios.post(\"/api/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n     \n        });\n        // Assuming the response includes pitch data or any other relevant information\n        setPitches(response.data.pitches); // Update state with response data\n      } catch (error) {\n        console.error(\"Error uploading file:\", error.response?.data);\n      } finally {\n        setIsUploading(false);\n        setShowLongProcessMessage(false);\n        clearTimeout(timer);\n        // Reset uploaded file state to allow for new uploads/recordings\n        setUploadedFile(null);\n      }\n  };\n\n  const startRecording = async () => {\n    if (uploadedFile) return; // Do not start recording if a file has been uploaded\n\n    setIsRecording(true);\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    mediaRecorderRef.current = new MediaRecorder(stream);\n    audioChunksRef.current = [];\n    mediaRecorderRef.current.ondataavailable = (event) => {\n      audioChunksRef.current.push(event.data);\n    };\n\n    mediaRecorderRef.current.onstop = uploadAudio; // Call uploadAudio directly after recording stops\n\n    mediaRecorderRef.current.start();\n  };\n\n  const handleStopRecording = () => {\n    setIsRecording(false);\n    mediaRecorderRef.current.stop();\n  };\n\n  return (\n    <div className=\"container\">\n      {isUploading ? (\n        <div className=\"spinner-container\">\n          <ClipLoader color=\"#FFF\" size={50} />\n          {showLongProcessMessage && <p>This may take a while...</p>}\n        </div>\n      ) : (\n        <div>\n          <h1>Pitch It</h1>\n          <p>Record your audio, specify your language and your targeted key to watch the magic!</p>\n          <input\n            type=\"file\"\n            onChange={handleFileUpload}\n            disabled={isRecording}\n            accept=\"audio/*\"\n          />\n          <button\n            onClick={isRecording ? handleStopRecording : startRecording}\n            disabled={!!uploadedFile}\n            className={`record-button ${isRecording ? \"recording\" : \"\"}`}\n          >\n            <div className={isRecording ? ('inner-square') : ('inner-circle')} />\n          </button>\n          <div className=\"selectors\">\n            <Select\n              options={languageOptions}\n              onChange={handleChangeLanguage}\n              placeholder=\"Language\"\n              styles={selectStyle}\n              isDisabled={isRecording || isUploading}\n            />\n            <Select\n              options={scaleOptions}\n              onChange={handleChangeScale}\n              placeholder=\"Key\"\n              styles={selectStyle}\n              isDisabled={isRecording || isUploading}\n            />\n          </div>\n          {pitches && pitches.map((pitch, index) => (\n            <div key={index}>\n              <p>{pitch.note}</p>\n              <h1>{pitch.frequency}</h1>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioRecorder;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}