{"ast":null,"code":"import{useState,useRef}from'react';const useAudioRecorder=()=>{const[isRecording,setIsRecording]=useState(false);const mediaRecorderRef=useRef(null);const audioChunksRef=useRef([]);const startRecording=async()=>{if(isRecording)return;setIsRecording(true);audioChunksRef.current=[];try{const stream=await navigator.mediaDevices.getUserMedia({audio:true});mediaRecorderRef.current=new MediaRecorder(stream);mediaRecorderRef.current.ondataavailable=event=>{audioChunksRef.current.push(event.data);};mediaRecorderRef.current.start();}catch(err){console.error('Error starting recording:',err);setIsRecording(false);}};const stopRecording=()=>{if(!isRecording)return;setIsRecording(false);mediaRecorderRef.current.stop();};return{isRecording,startRecording,stopRecording,audioChunksRef};};export default useAudioRecorder;","map":{"version":3,"names":["useState","useRef","useAudioRecorder","isRecording","setIsRecording","mediaRecorderRef","audioChunksRef","startRecording","current","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","ondataavailable","event","push","data","start","err","console","error","stopRecording","stop"],"sources":["/var/www/pitch-it/client/src/components/useAudioRecorder.js"],"sourcesContent":["import { useState, useRef } from 'react';\n\nconst useAudioRecorder = () => {\n  const [isRecording, setIsRecording] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n\n  const startRecording = async () => {\n    if (isRecording) return;\n\n    setIsRecording(true);\n    audioChunksRef.current = [];\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = (event) => {\n        audioChunksRef.current.push(event.data);\n      };\n      mediaRecorderRef.current.start();\n    } catch (err) {\n      console.error('Error starting recording:', err);\n      setIsRecording(false);\n    }\n  };\n\n  const stopRecording = () => {\n    if (!isRecording) return;\n\n    setIsRecording(false);\n    mediaRecorderRef.current.stop();\n  };\n\n  return {\n    isRecording,\n    startRecording,\n    stopRecording,\n    audioChunksRef,\n  };\n};\n\nexport default useAudioRecorder;\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,MAAM,KAAQ,OAAO,CAExC,KAAM,CAAAC,gBAAgB,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGJ,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAAAK,gBAAgB,CAAGJ,MAAM,CAAC,IAAI,CAAC,CACrC,KAAM,CAAAK,cAAc,CAAGL,MAAM,CAAC,EAAE,CAAC,CAEjC,KAAM,CAAAM,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjC,GAAIJ,WAAW,CAAE,OAEjBC,cAAc,CAAC,IAAI,CAAC,CACpBE,cAAc,CAACE,OAAO,CAAG,EAAE,CAC3B,GAAI,CACF,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAC,CACzER,gBAAgB,CAACG,OAAO,CAAG,GAAI,CAAAM,aAAa,CAACL,MAAM,CAAC,CACpDJ,gBAAgB,CAACG,OAAO,CAACO,eAAe,CAAIC,KAAK,EAAK,CACpDV,cAAc,CAACE,OAAO,CAACS,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC,CACzC,CAAC,CACDb,gBAAgB,CAACG,OAAO,CAACW,KAAK,CAAC,CAAC,CAClC,CAAE,MAAOC,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAEF,GAAG,CAAC,CAC/ChB,cAAc,CAAC,KAAK,CAAC,CACvB,CACF,CAAC,CAED,KAAM,CAAAmB,aAAa,CAAGA,CAAA,GAAM,CAC1B,GAAI,CAACpB,WAAW,CAAE,OAElBC,cAAc,CAAC,KAAK,CAAC,CACrBC,gBAAgB,CAACG,OAAO,CAACgB,IAAI,CAAC,CAAC,CACjC,CAAC,CAED,MAAO,CACLrB,WAAW,CACXI,cAAc,CACdgB,aAAa,CACbjB,cACF,CAAC,CACH,CAAC,CAED,cAAe,CAAAJ,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}