{"ast":null,"code":"import{useState}from'react';import axios from'axios';const useFileUploader=()=>{const[isUploading,setIsUploading]=useState(false);const[showLongProcessMessage,setShowLongProcessMessage]=useState(false);const[pitches,setPitches]=useState([]);const uploadAudio=async(audioData,selectedLanguageCode,selectedScale)=>{setIsUploading(true);setShowLongProcessMessage(false);const timer=setTimeout(()=>{setShowLongProcessMessage(true);},10000);const formData=new FormData();formData.append(\"file\",audioData);formData.append(\"language\",selectedLanguageCode);formData.append(\"scale\",selectedScale);try{const response=await axios.post(\"/api/upload\",formData,{headers:{\"Content-Type\":\"multipart/form-data\"}});setPitches(response.data.pitches);// Assuming the API returns pitches\n}catch(error){console.error(\"Error uploading file:\",error);}finally{setIsUploading(false);setShowLongProcessMessage(false);clearTimeout(timer);}};return{isUploading,showLongProcessMessage,pitches,uploadAudio};};export default useFileUploader;","map":{"version":3,"names":["useState","axios","useFileUploader","isUploading","setIsUploading","showLongProcessMessage","setShowLongProcessMessage","pitches","setPitches","uploadAudio","audioData","selectedLanguageCode","selectedScale","timer","setTimeout","formData","FormData","append","response","post","headers","data","error","console","clearTimeout"],"sources":["/var/www/pitch-it/client/src/components/useFileUploader.js"],"sourcesContent":["import { useState } from 'react';\nimport axios from 'axios';\n\nconst useFileUploader = () => {\n  const [isUploading, setIsUploading] = useState(false);\n  const [showLongProcessMessage, setShowLongProcessMessage] = useState(false);\n  const [pitches, setPitches] = useState([]);\n\n  const uploadAudio = async (audioData, selectedLanguageCode, selectedScale) => {\n    setIsUploading(true);\n    setShowLongProcessMessage(false);\n\n    const timer = setTimeout(() => {\n      setShowLongProcessMessage(true);\n    }, 10000);\n\n    const formData = new FormData();\n    formData.append(\"file\", audioData);\n    formData.append(\"language\", selectedLanguageCode);\n    formData.append(\"scale\", selectedScale);\n\n    try {\n      const response = await axios.post(\"/api/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      });\n      setPitches(response.data.pitches); // Assuming the API returns pitches\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n    } finally {\n      setIsUploading(false);\n      setShowLongProcessMessage(false);\n      clearTimeout(timer);\n    }\n  };\n\n  return {\n    isUploading,\n    showLongProcessMessage,\n    pitches,\n    uploadAudio,\n  };\n};\n\nexport default useFileUploader;\n"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGJ,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACK,sBAAsB,CAAEC,yBAAyB,CAAC,CAAGN,QAAQ,CAAC,KAAK,CAAC,CAC3E,KAAM,CAACO,OAAO,CAAEC,UAAU,CAAC,CAAGR,QAAQ,CAAC,EAAE,CAAC,CAE1C,KAAM,CAAAS,WAAW,CAAG,KAAAA,CAAOC,SAAS,CAAEC,oBAAoB,CAAEC,aAAa,GAAK,CAC5ER,cAAc,CAAC,IAAI,CAAC,CACpBE,yBAAyB,CAAC,KAAK,CAAC,CAEhC,KAAM,CAAAO,KAAK,CAAGC,UAAU,CAAC,IAAM,CAC7BR,yBAAyB,CAAC,IAAI,CAAC,CACjC,CAAC,CAAE,KAAK,CAAC,CAET,KAAM,CAAAS,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEP,SAAS,CAAC,CAClCK,QAAQ,CAACE,MAAM,CAAC,UAAU,CAAEN,oBAAoB,CAAC,CACjDI,QAAQ,CAACE,MAAM,CAAC,OAAO,CAAEL,aAAa,CAAC,CAEvC,GAAI,CACF,KAAM,CAAAM,QAAQ,CAAG,KAAM,CAAAjB,KAAK,CAACkB,IAAI,CAAC,aAAa,CAAEJ,QAAQ,CAAE,CACzDK,OAAO,CAAE,CACP,cAAc,CAAE,qBAClB,CACF,CAAC,CAAC,CACFZ,UAAU,CAACU,QAAQ,CAACG,IAAI,CAACd,OAAO,CAAC,CAAE;AACrC,CAAE,MAAOe,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC/C,CAAC,OAAS,CACRlB,cAAc,CAAC,KAAK,CAAC,CACrBE,yBAAyB,CAAC,KAAK,CAAC,CAChCkB,YAAY,CAACX,KAAK,CAAC,CACrB,CACF,CAAC,CAED,MAAO,CACLV,WAAW,CACXE,sBAAsB,CACtBE,OAAO,CACPE,WACF,CAAC,CACH,CAAC,CAED,cAAe,CAAAP,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}